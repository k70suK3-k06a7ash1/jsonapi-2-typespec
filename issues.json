[
  {
    "title": "Add CLI interface with bin configuration",
    "body": "## Summary\\nAdd command-line interface to transform the library into a CLI tool for Rails developers.\\n\\n## Current State\\n- NPM library requires programmatic usage\\n- Missing bin configuration in package.json\\n- No CLI entry point\\n\\n## Requirements\\n- [ ] Add bin field to package.json pointing to CLI entry\\n- [ ] Create src/cli/index.ts as main CLI entry point\\n- [ ] Implement command-line argument parsing (commander.js or yargs)\\n- [ ] Add basic convert command\\n\\n## Acceptance Criteria\\n- [ ] jsonapi-convert --help shows usage information\\n- [ ] Can install globally: npm install -g ruby-jsonapi-serializer-2-typespec\\n- [ ] Basic conversion works: jsonapi-convert --input file.rb --output file.tsp\\n\\n## Related\\nPart of CLI tool transformation for Rails workflow integration.",
    "labels": ["enhancement"]
  },
  {
    "title": "Implement Rails-aware file discovery",
    "body": "## Summary\\nAdd automatic discovery of Ruby serializers in Rails project structure.\\n\\n## Current State\\n- Manual file path specification required\\n- No Rails project structure awareness\\n- Cannot batch process serializer directories\\n\\n## Requirements\\n- [ ] Auto-detect Rails project root (presence of config/application.rb)\\n- [ ] Discover serializers in app/serializers/ directory\\n- [ ] Support Rails namespace patterns (Api::V1::ArticleSerializer)\\n- [ ] Handle nested directory structures\\n\\n## Implementation\\n```bash\\n# Target usage\\njsonapi-convert --rails-auto-discover\\njsonapi-convert --rails-root ./my-rails-app\\njsonapi-convert --input app/serializers --output types/\\n```\\n\\n## Acceptance Criteria\\n- [ ] Automatically finds all *_serializer.rb files in Rails app\\n- [ ] Respects Rails naming conventions and namespaces\\n- [ ] Works with nested serializer directories\\n- [ ] Provides clear feedback on discovered files\\n\\n## Related\\nEssential for Rails developer workflow integration.",
    "labels": ["enhancement"]
  },
  {
    "title": "Add batch processing for multiple serializers",
    "body": "## Summary\\nEnable processing entire directories of Ruby serializers in a single command.\\n\\n## Current State\\n- Single file processing only\\n- Manual iteration required for multiple files\\n- No progress feedback for large operations\\n\\n## Requirements\\n- [ ] Process entire directories with glob patterns\\n- [ ] Support multiple input files/directories\\n- [ ] Add progress indicators for batch operations\\n- [ ] Handle errors gracefully (continue processing other files)\\n\\n## CLI Interface\\n```bash\\njsonapi-convert --input app/serializers/**/*_serializer.rb --output types/\\njsonapi-convert --input app/serializers --output-dir ./generated-types\\n```\\n\\n## Acceptance Criteria\\n- [ ] Can process 50+ serializer files in single command\\n- [ ] Shows progress: Processing 15/23 files...\\n- [ ] Continues processing if individual files fail\\n- [ ] Generates summary report of successes/failures\\n\\n## Related\\nRequired for real-world Rails applications with many serializers.",
    "labels": ["enhancement"]
  },
  {
    "title": "Add watch mode for development workflow",
    "body": "## Summary\\nImplement file watching to automatically regenerate TypeSpec when Ruby serializers change.\\n\\n## Current State\\n- Manual re-running required after serializer changes\\n- No integration with Rails development workflow\\n- No real-time feedback during development\\n\\n## Requirements\\n- [ ] Watch Rails serializer directories for changes\\n- [ ] Automatically trigger conversion on file changes\\n- [ ] Debounce rapid changes\\n- [ ] Clear terminal and show status on each run\\n\\n## CLI Interface\\n```bash\\njsonapi-convert --watch --input app/serializers --output types/\\njsonapi-convert --watch --rails-auto-discover\\n```\\n\\n## Implementation Notes\\n- Use chokidar for file watching\\n- Debounce changes (500ms default)\\n- Clear screen and show timestamp on each run\\n- Handle file deletion and creation\\n\\n## Acceptance Criteria\\n- [ ] Watches for .rb file changes in specified directories\\n- [ ] Automatically regenerates output files\\n- [ ] Shows clear status messages with timestamps\\n- [ ] Handles rapid successive changes gracefully\\n- [ ] Can be interrupted with Ctrl+C\\n\\n## Related\\nEssential for Rails development workflow integration.",
    "labels": ["enhancement"]
  },
  {
    "title": "Add configuration file support",
    "body": "## Summary\\nSupport configuration files to reduce repetitive CLI arguments for project-specific settings.\\n\\n## Current State\\n- All options must be specified via CLI arguments\\n- No way to save project-specific preferences\\n- Repetitive commands for complex projects\\n\\n## Requirements\\n- [ ] Support .jsonapi-convert.json configuration files\\n- [ ] Allow configuration in package.json under jsonapi-convert key\\n- [ ] CLI arguments override configuration file settings\\n- [ ] Support environment-specific configurations\\n\\n## Configuration Format\\n```json\\n{\\n  input: app/serializers,\\n  output: frontend/types/api.tsp,\\n  namespace: BlogApi,\\n  generateOperations: true,\\n  railsAutoDiscover: true,\\n  watch: false\\n}\\n```\\n\\n## CLI Integration\\n```bash\\njsonapi-convert --config custom-config.json\\njsonapi-convert  # Uses .jsonapi-convert.json if present\\n```\\n\\n## Acceptance Criteria\\n- [ ] Loads configuration from .jsonapi-convert.json by default\\n- [ ] CLI arguments override config file values\\n- [ ] Validates configuration schema\\n- [ ] Shows which config file is being used\\n- [ ] Supports both JSON and JS config files\\n\\n## Related\\nImproves developer experience for repeated usage.",
    "labels": ["enhancement"]
  },
  {
    "title": "Improve error handling and user feedback",
    "body": "## Summary\\nEnhance error messages, progress feedback, and user guidance for CLI usage.\\n\\n## Current State\\n- Library-focused error messages not suitable for CLI users\\n- No progress feedback for long operations\\n- Stack traces confusing for end users\\n\\n## Requirements\\n- [ ] User-friendly error messages for common issues\\n- [ ] Progress indicators for batch operations\\n- [ ] Clear success/failure reporting\\n- [ ] Helpful suggestions for fixing errors\\n\\n## Error Scenarios to Handle\\n- Rails project not detected\\n- No serializers found in specified directory\\n- Ruby parsing failures\\n- Output directory permission issues\\n- Invalid configuration\\n\\n## Example Improvements\\n```bash\\n# Before\\nError: ENOENT: no such file or directory, open './app/serializers'\\n\\n# After\\nDirectory not found: ./app/serializers\\nTip: Make sure you're in a Rails project root, or specify the correct path with --input\\n```\\n\\n## Acceptance Criteria\\n- [ ] No stack traces shown to end users\\n- [ ] Error messages include actionable suggestions\\n- [ ] Progress bars for operations taking >2 seconds\\n- [ ] Success messages with file counts and locations\\n- [ ] Colored output for better readability\\n\\n## Related\\nEssential for good CLI user experience.",
    "labels": ["enhancement"]
  },
  {
    "title": "Add comprehensive CLI documentation and examples",
    "body": "## Summary\\nCreate comprehensive documentation for CLI usage patterns and common Rails workflows.\\n\\n## Current State\\n- Documentation focuses on library API\\n- No CLI usage examples\\n- Missing Rails-specific workflow documentation\\n\\n## Requirements\\n- [ ] Update README with CLI usage examples\\n- [ ] Add Rails workflow documentation\\n- [ ] Create troubleshooting guide\\n- [ ] Add common configuration examples\\n\\n## Documentation Sections\\n\\n### CLI Usage\\n```bash\\n# Basic usage\\njsonapi-convert --input app/serializers --output types/api.tsp\\n\\n# Rails integration\\njsonapi-convert --rails-auto-discover --namespace MyApi\\n\\n# Development workflow\\njsonapi-convert --watch --config .jsonapi-convert.json\\n```\\n\\n### Rails Integration\\n- How to integrate into Rails development workflow\\n- Common directory structures and patterns\\n- Integration with frontend build processes\\n- CI/CD pipeline examples\\n\\n### Troubleshooting\\n- Common error scenarios and solutions\\n- Rails project detection issues\\n- Parser limitations and workarounds\\n\\n## Acceptance Criteria\\n- [ ] README includes CLI installation and basic usage\\n- [ ] Complete CLI command reference with examples\\n- [ ] Rails-specific workflow documentation\\n- [ ] Troubleshooting section with common issues\\n- [ ] Configuration examples for different project types\\n\\n## Related\\nSupports adoption and reduces support burden.",
    "labels": ["documentation"]
  }
]